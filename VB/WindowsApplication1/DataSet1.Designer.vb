'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Namespace WindowsApplication1

    ''' <summary>
    ''' Represents a strongly typed in-memory cache of data.
    ''' </summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
    <Global.System.SerializableAttribute()>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code")>
    <Global.System.ComponentModel.ToolboxItemAttribute(True)>
    <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")>
    <Global.System.Xml.Serialization.XmlRootAttribute("DataSet1")>
    <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
    Public Partial Class DataSet1
        Inherits Global.System.Data.DataSet

        Private tableDataTable1 As WindowsApplication1.DataSet1.DataTable1DataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Sub New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If(Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If

            Dim strSchema As String =(CStr((info.GetValue("XmlSchema", GetType(String)))))
            If(Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If(ds.Tables("DataTable1") IsNot Nothing) Then
                    MyBase.Tables.Add(New WindowsApplication1.DataSet1.DataTable1DataTable(ds.Tables("DataTable1")))
                End If

                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If

            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(False)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
        Public ReadOnly Property DataTable1 As DataTable1DataTable
            Get
                Return Me.tableDataTable1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.BrowsableAttribute(True)>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
        Public Overrides Property SchemaSerializationMode As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get

            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Tables As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        <Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
        Public Overloads ReadOnly Property Relations As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As WindowsApplication1.DataSet1 = CType((MyBase.Clone()), WindowsApplication1.DataSet1)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If(Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If(ds.Tables("DataTable1") IsNot Nothing) Then
                    MyBase.Tables.Add(New WindowsApplication1.DataSet1.DataTable1DataTable(ds.Tables("DataTable1")))
                End If

                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Friend Sub InitVars(ByVal initTable As Boolean)
            Me.tableDataTable1 = CType((MyBase.Tables("DataTable1")), WindowsApplication1.DataSet1.DataTable1DataTable)
            If(initTable = True) Then
                If(Me.tableDataTable1 IsNot Nothing) Then
                    Me.tableDataTable1.InitVars()
                End If
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub InitClass()
            Me.DataSetName = "DataSet1"
            Me.Prefix = ""
            Me.[Namespace] = "http://tempuri.org/DataSet1.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableDataTable1 = New WindowsApplication1.DataSet1.DataTable1DataTable()
            MyBase.Tables.Add(Me.tableDataTable1)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Function ShouldSerializeDataTable1() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If(e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As WindowsApplication1.DataSet1 = New WindowsApplication1.DataSet1()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.[Namespace] = ds.[Namespace]
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                    While schemas.MoveNext()
                        schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If(s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                            End While

                            If(s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    End While
                Finally
                    If(s1 IsNot Nothing) Then
                        s1.Close()
                    End If

                    If(s2 IsNot Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If

            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As WindowsApplication1.DataSet1.DataTable1RowChangeEvent)

        ''' <summary>
        ''' Represents the strongly named DataTable class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        <Global.System.SerializableAttribute()>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
        Public Partial Class DataTable1DataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable

            Private columnID As Global.System.Data.DataColumn

            Private columnName As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New()
                Me.TableName = "DataTable1"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If(table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If

                If(Not Equals(table.Locale.ToString(), table.DataSet.Locale.ToString())) Then
                    Me.Locale = table.Locale
                End If

                If(Not Equals(table.[Namespace], table.DataSet.[Namespace])) Then
                    Me.[Namespace] = table.[Namespace]
                End If

                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property IDColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property NameColumn As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            <Global.System.ComponentModel.BrowsableAttribute(False)>
            Public ReadOnly Property Count As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Default Public ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
                Get
                    Return CType((Me.Rows(index)), WindowsApplication1.DataSet1.DataTable1Row)
                End Get
            End Property

            Public Event DataTable1RowChanging As WindowsApplication1.DataSet1.DataTable1RowChangeEventHandler

            Public Event DataTable1RowChanged As WindowsApplication1.DataSet1.DataTable1RowChangeEventHandler

            Public Event DataTable1RowDeleting As WindowsApplication1.DataSet1.DataTable1RowChangeEventHandler

            Public Event DataTable1RowDeleted As WindowsApplication1.DataSet1.DataTable1RowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub AddDataTable1Row(ByVal row As WindowsApplication1.DataSet1.DataTable1Row)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function AddDataTable1Row(ByVal ID As Integer, ByVal Name As String) As DataTable1Row
                Dim rowDataTable1Row As WindowsApplication1.DataSet1.DataTable1Row = CType((Me.NewRow()), WindowsApplication1.DataSet1.DataTable1Row)
                Dim columnValuesArray As Object() = New Object() {ID, Name}
                rowDataTable1Row.ItemArray = columnValuesArray
                Me.Rows.Add(rowDataTable1Row)
                Return rowDataTable1Row
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As WindowsApplication1.DataSet1.DataTable1DataTable = CType((MyBase.Clone()), WindowsApplication1.DataSet1.DataTable1DataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New WindowsApplication1.DataSet1.DataTable1DataTable()
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub InitVars()
                Me.columnID = Me.Columns("ID")
                Me.columnName = Me.Columns("Name")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Private Sub InitClass()
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnID)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnName)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function NewDataTable1Row() As DataTable1Row
                Return CType((Me.NewRow()), WindowsApplication1.DataSet1.DataTable1Row)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New WindowsApplication1.DataSet1.DataTable1Row(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(WindowsApplication1.DataSet1.DataTable1Row)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent DataTable1RowChanged(Me, New WindowsApplication1.DataSet1.DataTable1RowChangeEvent(CType((e.Row), WindowsApplication1.DataSet1.DataTable1Row), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent DataTable1RowChanging(Me, New WindowsApplication1.DataSet1.DataTable1RowChangeEvent(CType((e.Row), WindowsApplication1.DataSet1.DataTable1Row), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent DataTable1RowDeleted(Me, New WindowsApplication1.DataSet1.DataTable1RowChangeEvent(CType((e.Row), WindowsApplication1.DataSet1.DataTable1Row), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent DataTable1RowDeleting(Me, New WindowsApplication1.DataSet1.DataTable1RowChangeEvent(CType((e.Row), WindowsApplication1.DataSet1.DataTable1Row), e.Action))
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub RemoveDataTable1Row(ByVal row As WindowsApplication1.DataSet1.DataTable1Row)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As WindowsApplication1.DataSet1 = New WindowsApplication1.DataSet1()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.[Namespace] = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.[Namespace] = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.[Namespace]
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DataTable1DataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(CStr((dsSchema.TargetNamespace))).GetEnumerator()
                        While schemas.MoveNext()
                            schema = CType((schemas.Current), Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If(s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                While((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))
                                End While

                                If(s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        End While
                    Finally
                        If(s1 IsNot Nothing) Then
                            s1.Close()
                        End If

                        If(s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If

                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        ''' Represents strongly named DataRow class.
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Partial Class DataTable1Row
            Inherits Global.System.Data.DataRow

            Private tableDataTable1 As WindowsApplication1.DataSet1.DataTable1DataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDataTable1 = CType((Me.Table), WindowsApplication1.DataSet1.DataTable1DataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property ID As Integer
                Get
                    Try
                        Return(CInt((Me(Me.tableDataTable1.IDColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'DataTable1' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As Integer)
                    Me(Me.tableDataTable1.IDColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Property Name As String
                Get
                    Try
                        Return(CStr((Me(Me.tableDataTable1.NameColumn))))
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'DataTable1' is DBNull.", e)
                    End Try
                End Get

                Set(ByVal value As String)
                    Me(Me.tableDataTable1.NameColumn) = value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsIDNull() As Boolean
                Return Me.IsNull(Me.tableDataTable1.IDColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetIDNull()
                Me(Me.tableDataTable1.IDColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Function IsNameNull() As Boolean
                Return Me.IsNull(Me.tableDataTable1.NameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub SetNameNull()
                Me(Me.tableDataTable1.NameColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        ''' Row event argument class
        ''' </summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
        Public Class DataTable1RowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As WindowsApplication1.DataSet1.DataTable1Row

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public Sub New(ByVal row As WindowsApplication1.DataSet1.DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Row As DataTable1Row
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
            Public ReadOnly Property Action As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
